Nonterminals useless in grammar

    OP


Terminals unused in grammar

    SEMICOLON
    CLASS
    ELSE
    FI
    IF
    IN
    INHERITS
    LET
    LOOP
    POOL
    THEN
    WHILE
    CASE
    ESAC
    OF
    DARROW
    NEW
    ISVOID
    STR_CONST
    BOOL_CONST
    TYPEID
    IDENTIFIER
    NOT
    LE
    LET_STMT
    ASSIGN
    ERROR


Rules useless in grammar

    8 OP: PLUS
    9   | MINUS
   10   | DIVIDE
   11   | MULTIPLY


Grammar

    0 $accept: prog $end

    1 prog: E

    2 $@1: %empty

    3 $@2: %empty

    4 $@3: %empty

    5 E: E PLUS E $@1 E MINUS E $@2 E MULTIPLY E $@3 E DIVIDE E
    6  | LBRACE E RBRACE
    7  | INT_CONST


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    SEMICOLON (258)
    CLASS (259)
    ELSE (260)
    FI (261)
    IF (262)
    IN (263)
    INHERITS (264)
    LET (265)
    LOOP (266)
    POOL (267)
    THEN (268)
    WHILE (269)
    CASE (270)
    ESAC (271)
    OF (272)
    DARROW (273)
    NEW (274)
    ISVOID (275)
    STR_CONST <string> (276)
    INT_CONST (277) 7
    BOOL_CONST (278)
    TYPEID (279)
    IDENTIFIER (280)
    NOT (281)
    LE (282)
    LET_STMT (283)
    ASSIGN (284)
    PLUS (285) 5
    MINUS (286) 5
    MULTIPLY (287) 5
    DIVIDE (288) 5
    LBRACE (289) 6
    RBRACE (290) 6
    ERROR (291)


Nonterminals, with rules where they appear

    $accept (37)
        on left: 0
    prog (38)
        on left: 1
        on right: 0
    E (39)
        on left: 5 6 7
        on right: 1 5 6
    $@1 (40)
        on left: 2
        on right: 5
    $@2 (41)
        on left: 3
        on right: 5
    $@3 (42)
        on left: 4
        on right: 5


State 0

    0 $accept: . prog $end

    INT_CONST  shift, and go to state 1
    LBRACE     shift, and go to state 2

    prog  go to state 3
    E     go to state 4


State 1

    7 E: INT_CONST .

    $default  reduce using rule 7 (E)


State 2

    6 E: LBRACE . E RBRACE

    INT_CONST  shift, and go to state 1
    LBRACE     shift, and go to state 2

    E  go to state 5


State 3

    0 $accept: prog . $end

    $end  shift, and go to state 6


State 4

    1 prog: E .
    5 E: E . PLUS E $@1 E MINUS E $@2 E MULTIPLY E $@3 E DIVIDE E

    PLUS  shift, and go to state 7

    $default  reduce using rule 1 (prog)


State 5

    5 E: E . PLUS E $@1 E MINUS E $@2 E MULTIPLY E $@3 E DIVIDE E
    6  | LBRACE E . RBRACE

    PLUS    shift, and go to state 7
    RBRACE  shift, and go to state 8


State 6

    0 $accept: prog $end .

    $default  accept


State 7

    5 E: E PLUS . E $@1 E MINUS E $@2 E MULTIPLY E $@3 E DIVIDE E

    INT_CONST  shift, and go to state 1
    LBRACE     shift, and go to state 2

    E  go to state 9


State 8

    6 E: LBRACE E RBRACE .

    $default  reduce using rule 6 (E)


State 9

    5 E: E . PLUS E $@1 E MINUS E $@2 E MULTIPLY E $@3 E DIVIDE E
    5  | E PLUS E . $@1 E MINUS E $@2 E MULTIPLY E $@3 E DIVIDE E

    PLUS  shift, and go to state 7

    $default  reduce using rule 2 ($@1)

    $@1  go to state 10


State 10

    5 E: E PLUS E $@1 . E MINUS E $@2 E MULTIPLY E $@3 E DIVIDE E

    INT_CONST  shift, and go to state 1
    LBRACE     shift, and go to state 2

    E  go to state 11


State 11

    5 E: E . PLUS E $@1 E MINUS E $@2 E MULTIPLY E $@3 E DIVIDE E
    5  | E PLUS E $@1 E . MINUS E $@2 E MULTIPLY E $@3 E DIVIDE E

    PLUS   shift, and go to state 7
    MINUS  shift, and go to state 12


State 12

    5 E: E PLUS E $@1 E MINUS . E $@2 E MULTIPLY E $@3 E DIVIDE E

    INT_CONST  shift, and go to state 1
    LBRACE     shift, and go to state 2

    E  go to state 13


State 13

    5 E: E . PLUS E $@1 E MINUS E $@2 E MULTIPLY E $@3 E DIVIDE E
    5  | E PLUS E $@1 E MINUS E . $@2 E MULTIPLY E $@3 E DIVIDE E

    PLUS  shift, and go to state 7

    $default  reduce using rule 3 ($@2)

    $@2  go to state 14


State 14

    5 E: E PLUS E $@1 E MINUS E $@2 . E MULTIPLY E $@3 E DIVIDE E

    INT_CONST  shift, and go to state 1
    LBRACE     shift, and go to state 2

    E  go to state 15


State 15

    5 E: E . PLUS E $@1 E MINUS E $@2 E MULTIPLY E $@3 E DIVIDE E
    5  | E PLUS E $@1 E MINUS E $@2 E . MULTIPLY E $@3 E DIVIDE E

    PLUS      shift, and go to state 7
    MULTIPLY  shift, and go to state 16


State 16

    5 E: E PLUS E $@1 E MINUS E $@2 E MULTIPLY . E $@3 E DIVIDE E

    INT_CONST  shift, and go to state 1
    LBRACE     shift, and go to state 2

    E  go to state 17


State 17

    5 E: E . PLUS E $@1 E MINUS E $@2 E MULTIPLY E $@3 E DIVIDE E
    5  | E PLUS E $@1 E MINUS E $@2 E MULTIPLY E . $@3 E DIVIDE E

    PLUS  shift, and go to state 7

    $default  reduce using rule 4 ($@3)

    $@3  go to state 18


State 18

    5 E: E PLUS E $@1 E MINUS E $@2 E MULTIPLY E $@3 . E DIVIDE E

    INT_CONST  shift, and go to state 1
    LBRACE     shift, and go to state 2

    E  go to state 19


State 19

    5 E: E . PLUS E $@1 E MINUS E $@2 E MULTIPLY E $@3 E DIVIDE E
    5  | E PLUS E $@1 E MINUS E $@2 E MULTIPLY E $@3 E . DIVIDE E

    PLUS    shift, and go to state 7
    DIVIDE  shift, and go to state 20


State 20

    5 E: E PLUS E $@1 E MINUS E $@2 E MULTIPLY E $@3 E DIVIDE . E

    INT_CONST  shift, and go to state 1
    LBRACE     shift, and go to state 2

    E  go to state 21


State 21

    5 E: E . PLUS E $@1 E MINUS E $@2 E MULTIPLY E $@3 E DIVIDE E
    5  | E PLUS E $@1 E MINUS E $@2 E MULTIPLY E $@3 E DIVIDE E .

    $default  reduce using rule 5 (E)
