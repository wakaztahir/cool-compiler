Terminals unused in grammar

    SEMICOLON
    CLASS
    ELSE
    FI
    IF
    IN
    INHERITS
    LET
    LOOP
    POOL
    THEN
    WHILE
    CASE
    ESAC
    OF
    DARROW
    NEW
    ISVOID
    STR_CONST
    BOOL_CONST
    TYPEID
    IDENTIFIER
    NOT
    LE
    LET_STMT
    ASSIGN
    ERROR


State 12 conflicts: 1 shift/reduce
State 13 conflicts: 1 shift/reduce
State 14 conflicts: 1 shift/reduce
State 15 conflicts: 1 shift/reduce
State 16 conflicts: 5 shift/reduce


Grammar

    0 $accept: E $end

    1 E: INT_CONST
    2  | E PLUS E
    3  | E MULTIPLY E
    4  | E MINUS E
    5  | E DIVIDE E
    6  | E POWER E
    7  | LBRACE E RBRACE


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    SEMICOLON (258)
    CLASS (259)
    ELSE (260)
    FI (261)
    IF (262)
    IN (263)
    INHERITS (264)
    LET (265)
    LOOP (266)
    POOL (267)
    THEN (268)
    WHILE (269)
    CASE (270)
    ESAC (271)
    OF (272)
    DARROW (273)
    NEW (274)
    ISVOID (275)
    STR_CONST <string> (276)
    INT_CONST (277) 1
    BOOL_CONST (278)
    TYPEID (279)
    IDENTIFIER (280)
    NOT (281)
    LE (282)
    LET_STMT (283)
    ASSIGN (284)
    PLUS (285) 2
    MINUS (286) 4
    MULTIPLY (287) 3
    DIVIDE (288) 5
    POWER (289) 6
    LBRACE (290) 7
    RBRACE (291) 7
    ERROR (292)


Nonterminals, with rules where they appear

    $accept (38)
        on left: 0
    E (39)
        on left: 1 2 3 4 5 6 7
        on right: 0 2 3 4 5 6 7


State 0

    0 $accept: . E $end

    INT_CONST  shift, and go to state 1
    LBRACE     shift, and go to state 2

    E  go to state 3


State 1

    1 E: INT_CONST .

    $default  reduce using rule 1 (E)


State 2

    7 E: LBRACE . E RBRACE

    INT_CONST  shift, and go to state 1
    LBRACE     shift, and go to state 2

    E  go to state 4


State 3

    0 $accept: E . $end
    2 E: E . PLUS E
    3  | E . MULTIPLY E
    4  | E . MINUS E
    5  | E . DIVIDE E
    6  | E . POWER E

    $end      shift, and go to state 5
    PLUS      shift, and go to state 6
    MINUS     shift, and go to state 7
    MULTIPLY  shift, and go to state 8
    DIVIDE    shift, and go to state 9
    POWER     shift, and go to state 10


State 4

    2 E: E . PLUS E
    3  | E . MULTIPLY E
    4  | E . MINUS E
    5  | E . DIVIDE E
    6  | E . POWER E
    7  | LBRACE E . RBRACE

    PLUS      shift, and go to state 6
    MINUS     shift, and go to state 7
    MULTIPLY  shift, and go to state 8
    DIVIDE    shift, and go to state 9
    POWER     shift, and go to state 10
    RBRACE    shift, and go to state 11


State 5

    0 $accept: E $end .

    $default  accept


State 6

    2 E: E PLUS . E

    INT_CONST  shift, and go to state 1
    LBRACE     shift, and go to state 2

    E  go to state 12


State 7

    4 E: E MINUS . E

    INT_CONST  shift, and go to state 1
    LBRACE     shift, and go to state 2

    E  go to state 13


State 8

    3 E: E MULTIPLY . E

    INT_CONST  shift, and go to state 1
    LBRACE     shift, and go to state 2

    E  go to state 14


State 9

    5 E: E DIVIDE . E

    INT_CONST  shift, and go to state 1
    LBRACE     shift, and go to state 2

    E  go to state 15


State 10

    6 E: E POWER . E

    INT_CONST  shift, and go to state 1
    LBRACE     shift, and go to state 2

    E  go to state 16


State 11

    7 E: LBRACE E RBRACE .

    $default  reduce using rule 7 (E)


State 12

    2 E: E . PLUS E
    2  | E PLUS E .
    3  | E . MULTIPLY E
    4  | E . MINUS E
    5  | E . DIVIDE E
    6  | E . POWER E

    MULTIPLY  shift, and go to state 8
    DIVIDE    shift, and go to state 9
    POWER     shift, and go to state 10

    POWER     [reduce using rule 2 (E)]
    $default  reduce using rule 2 (E)


State 13

    2 E: E . PLUS E
    3  | E . MULTIPLY E
    4  | E . MINUS E
    4  | E MINUS E .
    5  | E . DIVIDE E
    6  | E . POWER E

    PLUS      shift, and go to state 6
    MULTIPLY  shift, and go to state 8
    DIVIDE    shift, and go to state 9
    POWER     shift, and go to state 10

    POWER     [reduce using rule 4 (E)]
    $default  reduce using rule 4 (E)


State 14

    2 E: E . PLUS E
    3  | E . MULTIPLY E
    3  | E MULTIPLY E .
    4  | E . MINUS E
    5  | E . DIVIDE E
    6  | E . POWER E

    DIVIDE  shift, and go to state 9
    POWER   shift, and go to state 10

    POWER     [reduce using rule 3 (E)]
    $default  reduce using rule 3 (E)


State 15

    2 E: E . PLUS E
    3  | E . MULTIPLY E
    4  | E . MINUS E
    5  | E . DIVIDE E
    5  | E DIVIDE E .
    6  | E . POWER E

    POWER  shift, and go to state 10

    POWER     [reduce using rule 5 (E)]
    $default  reduce using rule 5 (E)


State 16

    2 E: E . PLUS E
    3  | E . MULTIPLY E
    4  | E . MINUS E
    5  | E . DIVIDE E
    6  | E . POWER E
    6  | E POWER E .

    PLUS      shift, and go to state 6
    MINUS     shift, and go to state 7
    MULTIPLY  shift, and go to state 8
    DIVIDE    shift, and go to state 9
    POWER     shift, and go to state 10

    PLUS      [reduce using rule 6 (E)]
    MINUS     [reduce using rule 6 (E)]
    MULTIPLY  [reduce using rule 6 (E)]
    DIVIDE    [reduce using rule 6 (E)]
    POWER     [reduce using rule 6 (E)]
    $default  reduce using rule 6 (E)
